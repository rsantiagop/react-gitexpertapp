{"version":3,"sources":["components/Addcategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["Addcategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","items","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","item","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAK,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKlB,SACI,uBAAOO,KAAK,OACRC,MAAQT,EACRU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAKC,GACTC,MAAOF,EAAKE,MACZV,IAAG,UAAEQ,EAAKG,cAAP,aAAE,EAAaC,iBAAiBZ,OAExC,IAZgB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACpC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCFJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECCb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAiBxC,OAVAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAEGqB,EDRwBK,CAAa1B,GAAhCa,EAVyB,EAU9BN,KAAaa,EAViB,EAUjBA,QAEpB,OACI,qCACI,oBAAIJ,UAAU,wCAAd,SAAwDhB,IACtDoB,GAAW,2CACb,qBAAKJ,UAAU,YAAf,SAGQH,EAAOJ,KAAI,SAAAC,GAAI,OACX,cAAC,EAAD,eAEQA,GADEA,EAAKC,aErB1BgB,EAAe,WAAO,IAAD,EAEMzC,mBAAS,CAAC,cAFhB,mBAEvB0C,EAFuB,KAEX3C,EAFW,KAiB9B,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAIA,6BAEQ2C,EAAWnB,KAAI,SAAAC,GAAI,OACf,cAAC,EAAD,CAEIV,SAAWU,GADLA,Y,MC5BlCmB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ce8a3a66.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const Addcategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    // Handler submit\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories(items => [inputValue, ...items]);\n            setInputValue('');\n        }\n    }\n\n    return ( \n        <form onSubmit={handleSubmit}>\n            <input type=\"text\"\n                value={ inputValue } \n                onChange={handleInputChange}/>            \n        </form>      \n    )\n}\n\nAddcategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async ( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=3wx9YFvK7AXO5fAnpzUyPaChp77d3deL`;\n\n    const resp = await fetch( url );\n    const{ data } = await resp.json();\n\n    const gifs = data.map( item => {\n        return {\n            id: item.id,\n            title: item.title,\n            url: item.images?.downsized_medium.url\n        }\n    }, []);    \n    \n    return gifs;\n}    ","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeInDown\">\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n   // const [images, setImages] = useState([]);\n        \n    // Solo se ejecuta cuando es renderizado por primera vez, aÃ±adiendo el arreglo [] vacio al final\n    // useEffect(() => {\n    //     getGifs( category )\n    //         .then( setImages );\n    // }, [ category ]);\n\n    const {data:images, loading} = useFetchGifs(category);    \n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeInDown\">{ category }</h3>\n            { loading && <p>Loading...</p> }      \n            <div className=\"card-grid\">\n                {/* Con el operador  spread podemos pasar cada uno de las propiedades del objeto item*/}\n                {\n                    images.map(item => (\n                        <GifGridItem                         \n                            key={ item.id }\n                            {...item}\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\n// Primer hook\n// A diferencia del functional component, el hook no devuelve JSX\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n            });\n    }, [category]);\n\n    return state;\n}\n","import React, { useState } from 'react'\nimport { Addcategory } from './components/Addcategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {   \n\n    const [categories, setCategories] = useState(['One punch']);\n\n    /*\n    const handleAdd = (e) => {\n        // Si se utiliza asi, se cambia el tipo de dato de categories, en este caso a un String\n        //setCategories('Hunter');\n\n        // Se puede utilizar el callback, el cual es el estado anterior\n        //setCategories(cats => [...cats, 'Nuevo']);\n\n        // O utilizando el operador spred sin uso del callback\n        setCategories([...categories, 'Hunter']);\n    }\n    */\n\n    return (\n        <div>\n            <h2>GifExpertApp</h2>\n            <Addcategory setCategories={ setCategories }/>\n            <hr />\n            \n            {/* <button onClick={handleAdd}>Agregar</button> */}\n            \n            <ol>\n                {   \n                    categories.map(item => \n                        <GifGrid \n                            key={ item }\n                            category={ item } />)\n                }\n            </ol>\n        </div>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />, \n  document.getElementById('root')\n);"],"sourceRoot":""}